# module: importer.py
#
# save files


import subprocess
from micronux import converter


newSettings = {}
cache_file = './prog/cache.txt'

# Keep track of settings that changed
def setting_changed(ui):
    widget = ui.app.focusWidget()
    # workaround for radiobuttons
    if 'waveform' in widget.objectName():
        wave = widget.objectName()
        if '1' in wave:
            widget = ui.win.osc_1_waveform
        elif '2' in wave:
            widget = ui.win.osc_2_waveform
        elif '3' in wave:
            widget = ui.win.osc_3_waveform

    if not widget in newSettings:
        newSettings.update({widget.objectName: widget})


def export_line(widget, allSettings):
    setting = allSettings[widget.objectName()]
    if hasattr(widget, 'value'):
        new_value = widget.value()
    elif hasattr(widget, 'currentText'):
        new_value = widget.currentText()
    elif hasattr(widget, 'checkedButton'):
        new_value = widget
    elif hasattr(widget, 'checkState'):
        new_value = widget
    else:
        new_value = 'nope'
    line = setting.name+': '
    line += str(setting.format_val(new_value))
    return line


def build_txt_file(settings_list, allSettings):
    txt_file = '# Micron Program File\n'
    txt_file += '# generated by Micronux\n\n'
    for setting in settings_list:
        if setting in newSettings:
            line = export_line(newSettings[setting], allSettings)
            txt_file += line+'\n'
        else:
            line = allSettings[setting].name+': '
            line += allSettings[setting].value
            txt_file += line+'\n'
    return txt_file


def save_file(file_path, settings_list, allSettings):
    txt = build_txt_file(settings_list, allSettings)
    if file_path.endswith('.txt'):
        fname = file_path
    elif file_path.endswith('.syx'):
        fname = cache_file
    else:
        return False

    txt_file = open(fname, 'w')
    txt_file.write(txt)
    txt_file.close()

    if file_path.endswith('.syx'):
        if converter.ipd(cache_file):
            cache_syx = cache_file[:-3]+'syx'
            subprocess.run(['mv', cache_syx, file_path])
            subprocess.run(['rm', cache_file])
        else:
            return False

    print('saved '+file_path)
    return True
